---
- name: Create server
  hosts: localhost

  vars: 
    HETZNER_TOKEN: "{{ lookup('env', 'HETZNER_TOKEN') }}"
    HETZNER_SERVER_TYPE: "{{ lookup('env', 'HETZNER_SERVER_TYPE') }}"
    HETZNER_SERVER_NAME: "{{ lookup('env', 'HETZNER_SERVER_NAME') }}"
    HETZNER_SERVER_LOCATION: "{{ lookup('env', 'HETZNER_SERVER_LOCATION') }}"
    HETZNER_SSH_NAME: "{{ lookup('env', 'HETZNER_SSH_NAME') }}"
    CLOUDFLARE_TOKEN: "{{ lookup('env', 'CLOUDFLARE_TOKEN') }}"
    CLOUDFLARE_ZONE: "{{ lookup('env', 'CLOUDFLARE_ZONE') }}"
    CLOUDFLARE_EMAIL: "{{ lookup('env', 'CLOUDFLARE_EMAIL') }}"
    CLOUDFLARE_RECORD: "{{ lookup('env', 'CLOUDFLARE_RECORD') }}"

  tasks:
    - name: Retrieve server
      hcloud_server_info:
        api_token: "{{ HETZNER_TOKEN }}"
        name: "{{ HETZNER_SERVER_NAME }}"
      register: server_info

    - name: Make firewall what open port 81
      hetzner.hcloud.hcloud_firewall:
        api_token: "{{ HETZNER_TOKEN }}"
        name: "Nginx-proxy-manager"
        rules:
          - port: 81
            protocol: tcp
            direction: in
      register: firewall

    - name: Create a new instance with an SSH key.
      hetzner.hcloud.hcloud_server:
        api_token: "{{ HETZNER_TOKEN }}"
        name: "{{ HETZNER_SERVER_NAME }}"
        server_type: "{{ HETZNER_SERVER_TYPE }}"
        image: ubuntu-20.04
        location: "{{ HETZNER_SERVER_LOCATION }}"
        firewall: firewall.hcloud_firewall.id
        ssh_keys:
          - "{{ HETZNER_SSH_NAME }}"
        state: present
      register: instance_data
      when: server_info.hcloud_server_info | length == 0

    - name: wait for connection
      wait_for_connection:
        connect_timeout: 30

    - name: Update CloudFlare DNS records.
      community.general.cloudflare_dns:
        zone: "{{ CLOUDFLARE_ZONE }}"
        record: "{{ CLOUDFLARE_RECORD }}"
        type: A
        value: "{{ instance_data.hcloud_server.ipv4_address }}"
        solo: yes
        account_email: "{{ CLOUDFLARE_EMAIL }}" #TODO: this might be unnecessary
        api_token: "{{ CLOUDFLARE_TOKEN }}"
      register: record
      when: instance_data.hcloud_server.ipv4_address is defined and CLOUDFLARE_TOKEN != '' and CLOUDFLARE_ZONE != '' and CLOUDFLARE_EMAIL != ''