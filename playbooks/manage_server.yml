---
- name: Add server IP to group
  hosts: localhost

  vars: 
    HETZNER_TOKEN: "{{ lookup('env', 'HETZNER_TOKEN') }}"
    HETZNER_NAME: "{{ lookup('env', 'HETZNER_NAME') }} | default=server"
    USERNAME: "{{ lookup('env', 'USERNAME') }} | default=user"

  tasks:
    - name: Retrieve server
      hcloud_server_info:
        api_token: "{{ HETZNER_TOKEN }}"
        name: "{{ HETZNER_NAME }}"
      register: server_info

    - name: Add retrieved IP to group
      add_host:
        name: "{{ server_info.hcloud_server_info[0].ipv4_address }}"
        groups: servers

- name: Manage server
  hosts: servers
  remote_user: root
  gather_facts: False

  tasks:
    - name: wait for connection
      wait_for_connection:
        delay: 30
        connect_timeout: 30
      
    - name: install ranger
      apt:
        name: 
        - ranger
        - git
        - curl
        - vim
        state: latest
        update_cache: yes

    - name: Make docker group
      group:
        name: docker

    - name: Add new user called {{ USERNAME }}
      user:
        name: "{{ USERNAME }}"
        state: present
        groups:
          - sudo
          - docker
        shell: /bin/bash
        home: /home/{{ USERNAME }}

    - name: Make /home/{{ USERNAME }}/.ssh dir
      file:
        path: /home/{{ USERNAME }}/.ssh
        state: directory
        owner: "{{ USERNAME }}"
        group: "{{ USERNAME }}"

    - name: Copy root ssh key to new user
      copy:
        src: /root/.ssh/authorized_keys
        dest: /home/{{ USERNAME }}/.ssh/authorized_keys
        owner: "{{ USERNAME }}"
        group: "{{ USERNAME }}"
        mode: 0600
        remote_src: yes
        follow: yes

    - name: Run shell command
      shell: echo "#\!/bin/bash\nexport PS1='[\[\e[32m\]\u\[\e[m\]@\[\e[35m\]\h\[\e[m\]] \[\e[31m\]\w\[\e[m\] \[\e[32m\]â‡¨\[\e[m\]  '" > /home/{{ USERNAME }}/.bashrc && curl https://raw.githubusercontent.com/Shirobachi/dot-files/main/.aliases | grep -e 'alias\|export' >> /home/{{ USERNAME }}/.bashrc

    - name: Copy /home/{{ USERNAME }}/.bashrc to /root/.bashrc
      copy:
        src: /home/{{ USERNAME }}/.bashrc
        dest: /root/.bashrc
        owner: root
        mode: 0600
        remote_src: yes
        follow: yes

    - name: Install Docker
      ansible.builtin.shell: cd ~ && curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh && sudo rm get-docker.sh && sudo systemctl enable docker && sudo systemctl start docker

    - name: Install Docker Compose
      ansible.builtin.shell: curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose

    - name: Make sure dir /opt exist
      file:
        path: /opt
        state: directory
        owner: "{{ USERNAME }}"
        group: "{{ USERNAME }}"

    - name: Prepare nginx-proxy-manager
      block:
      - name: make dir
        file:
          path: /opt/nginx-proxy-manager
          state: directory
          owner: "{{ USERNAME }}"
          group: "{{ USERNAME }}"

      - name: copy file
        copy:
          src: ./Templates/nginx-proxy-manager.yml
          dest: /opt/nginx-proxy-manager/docker-compose.yml
          owner: "{{ USERNAME }}"
          group: "{{ USERNAME }}"
          mode: 0600
          follow: yes

      - name: generate .env with random PASS, LOGIN and DB_NAME
        shell: echo "PASS={{ lookup('community.general.random_string', length=48, upper=true, numbers=false, special=false) }}" > /opt/nginx-proxy-manager/.env && echo "LOGIN={{ lookup('community.general.random_string', length=48, upper=true, numbers=false, special=false) }}" >> /opt/nginx-proxy-manager/.env && echo "DB_NAME={{ lookup('community.general.random_string', length=48, upper=true, numbers=false, special=false) }}" >> /opt/nginx-proxy-manager/.env

      - name: Run docker-compose
        ansible.builtin.shell: cd /opt/nginx-proxy-manager && docker-compose up -d

    - name: Prepare portainer
      block: 
      - name: make dir
        file:
          path: /opt/portainer
          state: directory
          owner: "{{ USERNAME }}"
          group: "{{ USERNAME }}"

      - name: copy file
        copy:
          src: ./Templates/portainer.yml
          dest: /opt/portainer/docker-compose.yml
          owner: "{{ USERNAME }}"
          group: "{{ USERNAME }}"
          mode: 0600
          follow: yes

      - name: Run docker-compose
        ansible.builtin.shell: cd /opt/portainer && docker-compose up -d

    - name: Check whether swap is already enabled or not
      shell: cat /etc/sysctl.conf
      register: swap_enabled

    - block:
      - name: create swap file
        command: dd if=/dev/zero of=/swapfile bs=1G count=2

      - name: change permission type
        file: path=/swapfile mode=600 state=file

      - name: setup swap
        command: mkswap /swapfile
    
      - name: create swap
        command: swapon /swapfile

      - name: Add to fstab
        action: lineinfile dest=/etc/fstab regexp="swapfile" line="/swapfile none swap sw 0 0" state=present

      - name: start swap
        command: swapon -a

      - name: set swapiness
        sysctl:
          name: vm.swappiness
          value: "10"

      - name: set swapiness
        sysctl:
          name: vm.vfs_cache_pressure
          value: "50"

      when: swap_enabled.stdout.find('swappiness') == -1

    - name: Remove sudo password asking from sudoers
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: /usr/sbin/visudo -cf %s

    - block:
      - name: Disable login via password to SSH
        lineinfile:
          path: /etc/ssh/sshd_config
          state: present
          regexp: '^#*PasswordAuthentication'
          line: 'PasswordAuthentication no'
          validate: /usr/sbin/sshd -t -f %s
      - name: reload sshd service
        service:
          name: sshd
          state: reloaded
